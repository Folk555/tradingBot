package folk.tradingbot;

import folk.tradingbot.trader.CashFlowTrader;
import folk.tradingbot.trader.dto.TraderPosition;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class CashFlowTraderTest {

    @Autowired
    CashFlowTrader cashFlowTrader;

    @Disabled//–Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω
    @Test
    void cashFlow_traderIdea() {
        String message = """
                –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–∞—è –∏–¥–µ—è: OZON #OZON
                –° –ø—Ä–æ—à–ª–æ–≥–æ –Ω–∞—à–µ–≥–æ –æ–±–∑–æ—Ä–∞ —Ü–µ–Ω–∞ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è
                –Ω–∞—Ö–æ–¥–∏–ª–∞—Å—å –≤ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏, –Ω–æ —Å–µ–π—á–∞—Å –ø—Ä–∏–±–ª–∏–∑–∏–ª–∞—Å—å –∫
                —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ 2500–†, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫.
                –û–¥–Ω–∞–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ä–∏—Å–∫ –ø–∞–¥–µ–Ω–∏—è –¥–æ 1600-1400 —Ä—É–±–ª–µ–π.
                –ü–æ—ç—Ç–æ–º—É —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                –≤ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã.
                –¢–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω:
                –ï—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞–±–∏—Ä–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é, —Ç–æ
                —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–µ –±–æ–ª–µ–µ
                —á–µ–º –Ω–∞ 1/3 –æ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–º–∞.
                –ï—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Å–Ω–∏–∂–∞—Ç—å—Å—è, —Ç–æ –≤—Ç–æ—Ä—É—é 1/3
                —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∫—É–ø–∏—Ç—å –ø–æ 1600–†.
                –ü–æ—Å–ª–µ–¥–Ω—é—é 1/3 –ø–æ–∑–∏—Ü–∏–∏ –∫—É–ø–∏—Ç—å –≤ —Å–ª—É—á–∞–µ —Å–Ω–∏–∂–µ–Ω–∏—è –∫
                1400–†.
                –¶–µ–ª–∏:
                –ü–µ—Ä–≤–∞—è —Ü–µ–ª—å: 2900–† (+14%),
                –í—Ç–æ—Ä–∞—è —Ü–µ–ª—å: 3440–† (+34%),
                –¢—Ä–µ—Ç—å—è —Ü–µ–ª—å: 4000–† (+56%),
                –¢—Ä–µ—Ç—å—è —Ü–µ–ª—å: 4800–† (+86%),
                –°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç 12 –¥–æ 18 –º–µ—Å—è—Ü–µ–≤.
                –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!
                –î–∏—Å–∫–ª–µ–π–º–µ—Ä
                #–∏–¥–µ—è
                –í–∞—à–µ –º–Ω–µ–Ω–∏–µ:
                –í—ã—Ä–∞—Å—Ç–µ—Ç, –£–ø–∞–¥–µ—Ç, –ù–∞–±–ª—é–¥–∞—é
                """;
        CashFlowTrader cashFlowTrader = new CashFlowTrader();
        cashFlowTrader.cashFlow(message);

        Assertions.assertFalse(cashFlowTrader.traderIdeaRepo.getAllTraderIdeas().isEmpty());

        System.out.println(cashFlowTrader.traderIdeaRepo.getAllTraderIdeas());
    }

    @Test
    void cashFlow_traderSignalLong() {
        String message = """
            –ü–û–ö–£–ü–ö–ê LONG!
            üè¶ –ë–∞–Ω–∫ –í–¢–ë
            
            –¢–∏–∫–µ—Ä: #VTBR
            
            üü¢ –í–•–û–î: 86.39–†
            üî¥ –°—Ç–æ–ø: 81P
            üí∞ –¶–µ–ª—å: 100–† (+15.75%)
            üïØ –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ö–æ–¥–∞: 85.52 - 87.25–†
            ‚ö†Ô∏è –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!
            ‚ùóÔ∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!
            ‚ÄºÔ∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä
            
            –í–∞—à–µ –º–Ω–µ–Ω–∏–µ:
            üëç–í—ã—Ä–∞—Å—Ç–µ—Ç üëé–£–ø–∞–¥–µ—Ç üî•–ù–∞–±–ª—é–¥–∞—é
                """;

        cashFlowTrader.cashFlow(message);

        TraderPosition traderPosition = cashFlowTrader.traderPositionRepo
                .getLastOpenTraderPositionByTicker("#VTBR");

        Assertions.assertNotNull(traderPosition);
        Assertions.assertTrue(traderPosition.getName().contains("–ë–∞–Ω–∫ –í–¢–ë"));
        Assertions.assertTrue(traderPosition.getTicker().contains("#VTBR"));
        Assertions.assertEquals(Float.valueOf(86.39f), traderPosition.getStartPrice());
        Assertions.assertEquals(Float.valueOf(100f), traderPosition.getProfitPrice());
        Assertions.assertEquals(Float.valueOf(15.75f), traderPosition.getProfitPercent());
        Assertions.assertNull(traderPosition.getCloseProfitPercent());
        Assertions.assertEquals(Float.valueOf(81f), traderPosition.getStopPrice());
        Assertions.assertFalse(traderPosition.isClosed());
    }

    @Test
    void cashFlow_reopenTraderPosition() {
        String openTrader = """
            –ü–û–ö–£–ü–ö–ê LONG!
            –∫–∞–∫–∞—è-—Ç–æ —à—Ç—É–∫–∞
            
            –¢–∏–∫–µ—Ä: #MTLR
            
            üü¢ –í–•–û–î: 86.39–†
            üî¥ –°—Ç–æ–ø: 81P
            üí∞ –¶–µ–ª—å: 100–† (+15.75%)
            üïØ –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ö–æ–¥–∞: 85.52 - 87.25–†
            ‚ö†Ô∏è –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!
            ‚ùóÔ∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!
            ‚ÄºÔ∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä
            
            –í–∞—à–µ –º–Ω–µ–Ω–∏–µ:
            üëç–í—ã—Ä–∞—Å—Ç–µ—Ç üëé–£–ø–∞–¥–µ—Ç üî•–ù–∞–±–ª—é–¥–∞—é
                """;
        String reopenTrader = """
            ‚úÖ–§–∏–∫—Å–∏—Ä—É—é –≤—Ç–æ—Ä—É—é 1/3 –ø–æ –ª–æ–Ω–≥—É #MTLR –ø–æ 114.8–†, —ç—Ç–æ +5.51%
            P.S. –°—Ç–æ–ø –±—ã–ª –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ 108.81–†
                """;
        cashFlowTrader.cashFlow(openTrader);
        TraderPosition firstTraderPosition = cashFlowTrader.traderPositionRepo
                .getLastOpenTraderPositionByTicker("#MTLR");
        cashFlowTrader.cashFlow(reopenTrader);
        TraderPosition traderPosition = cashFlowTrader.traderPositionRepo
                .getLastOpenTraderPositionByTicker("#MTLR");

        Assertions.assertNotNull(traderPosition);
        Assertions.assertTrue(traderPosition.getName().contains("–∫–∞–∫–∞—è-—Ç–æ —à—Ç—É–∫–∞"));
        Assertions.assertTrue(traderPosition.getTicker().contains("#MTLR"));
        Assertions.assertEquals(Float.valueOf(114.8f), traderPosition.getStartPrice());
        Assertions.assertNull(traderPosition.getProfitPrice());
        Assertions.assertEquals(Float.valueOf(15.75f), traderPosition.getProfitPercent());
        Assertions.assertNull(traderPosition.getCloseProfitPercent());
        Assertions.assertEquals(Float.valueOf(108.81f), traderPosition.getStopPrice());
        Assertions.assertFalse(traderPosition.isClosed());

        firstTraderPosition = cashFlowTrader.traderPositionRepo
                .getTraderPositionById(Math.toIntExact(firstTraderPosition.getId()));
        Assertions.assertNotNull(firstTraderPosition);
        Assertions.assertTrue(firstTraderPosition.getName().contains("–∫–∞–∫–∞—è-—Ç–æ —à—Ç—É–∫–∞"));
        Assertions.assertTrue(firstTraderPosition.getTicker().contains("#MTLR"));
        Assertions.assertEquals(Float.valueOf(86.39f), firstTraderPosition.getStartPrice());
        Assertions.assertEquals(Float.valueOf(100f), firstTraderPosition.getProfitPrice());
        Assertions.assertEquals(Float.valueOf(15.75f), firstTraderPosition.getProfitPercent());
        Assertions.assertEquals(5.51f, firstTraderPosition.getCloseProfitPercent());
        Assertions.assertEquals(Float.valueOf(81f), firstTraderPosition.getStopPrice());
        Assertions.assertTrue(firstTraderPosition.isClosed());
    }

    @Test
    void cashFlow_reopenTraderPosition_noOpenPosition() {
        String reopenTrader = """
            ‚úÖ–§–∏–∫—Å–∏—Ä—É—é –≤—Ç–æ—Ä—É—é 1/3 –ø–æ –ª–æ–Ω–≥—É #MRRR –ø–æ 114.8–†, —ç—Ç–æ +5.51%
            P.S. –°—Ç–æ–ø –±—ã–ª –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ 108.81–†
                """;
        int firstSize = cashFlowTrader.traderPositionRepo.getAllTraderPositions().size();
        cashFlowTrader.cashFlow(reopenTrader);
        int secondSize = cashFlowTrader.traderPositionRepo.getAllTraderPositions().size();

        Assertions.assertEquals(firstSize, secondSize);
    }

    @Test
    void cashFlow_traderClosePosition() {
        String openTrader = """
            –ü–û–ö–£–ü–ö–ê LONG!
            –æ—Ç–∫—Ä—ã–ª–∏
            
            –¢–∏–∫–µ—Ä: #PLZL
            
            üü¢ –í–•–û–î: 86.39–†
            üî¥ –°—Ç–æ–ø: 81P
            üí∞ –¶–µ–ª—å: 100–† (+15.75%)
            üïØ –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ö–æ–¥–∞: 85.52 - 87.25–†
            ‚ö†Ô∏è –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!
            ‚ùóÔ∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!
            ‚ÄºÔ∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä
            
            –í–∞—à–µ –º–Ω–µ–Ω–∏–µ:
            üëç–í—ã—Ä–∞—Å—Ç–µ—Ç üëé–£–ø–∞–¥–µ—Ç üî•–ù–∞–±–ª—é–¥–∞—é
                """;
        String closeTrader = """
                ‚úÖ–§–∏–∫—Å–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å –ø–æ –ª–æ–Ω–≥—É #PLZL –ø–æ 15500–†, —ç—Ç–æ +11.07%üí™üöÄ
                P.S. –ú—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–±—ã–ª—å –ø–æ –±—É–º–∞–≥–µ –¥–≤–∞ —Ä–∞–∑–∞ +5.16% –∏ +7.77%
                –ò—Ç–æ–≥–æ —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –ø–æ —Å–¥–µ–ª–∫–µ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ +8%
                """;

        cashFlowTrader.cashFlow(openTrader);
        TraderPosition openTraderPosition = cashFlowTrader.traderPositionRepo
                .getLastOpenTraderPositionByTicker("#PLZL");
        int countBeforeClosePosition = cashFlowTrader.traderPositionRepo
                .getAllTraderPositions().size();
        cashFlowTrader.cashFlow(closeTrader);
        TraderPosition traderPosition = cashFlowTrader.traderPositionRepo
                .getTraderPositionById(Math.toIntExact(openTraderPosition.getId()));
        int countAfterClosePosition = cashFlowTrader.traderPositionRepo
                .getAllTraderPositions().size();

        Assertions.assertEquals(countBeforeClosePosition, countAfterClosePosition);
        Assertions.assertNotNull(traderPosition);
        Assertions.assertTrue(traderPosition.getName().contains("–æ—Ç–∫—Ä—ã–ª–∏"));
        Assertions.assertTrue(traderPosition.getTicker().contains("#PLZL"));
        Assertions.assertEquals(Float.valueOf(86.39f), traderPosition.getStartPrice());
        Assertions.assertEquals(Float.valueOf(100f), traderPosition.getProfitPrice());
        Assertions.assertEquals(Float.valueOf(15.75f), traderPosition.getProfitPercent());
        Assertions.assertEquals(11.07f, traderPosition.getCloseProfitPercent());
        Assertions.assertEquals(Float.valueOf(81f), traderPosition.getStopPrice());
        Assertions.assertTrue(traderPosition.isClosed());
    }

    @Test
    void cashFlow_reopenTraderPosition_debug() {
        String openTrader = """
                –ü–û–ö–£–ü–ö–ê LONG!
                üè¶T-–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
                
                –¢–∏–∫–µ—Ä: #ROSN
                
                 –í–•–û–î: 447.4–†
                 –°—Ç–æ–ø: 422.5P
                 –¶–µ–ª—å: 570–† (+27.4%)
                 –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ö–æ–¥–∞: 442.9 - 451.8–†
                 –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!
                 –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫!
                 –î–∏—Å–∫–ª–µ–π–º–µ—Ä
                
                –í–∞—à–µ –º–Ω–µ–Ω–∏–µ:
                –í—ã—Ä–∞—Å—Ç–µ—Ç –£–ø–∞–¥–µ—Ç –ù–∞–±–ª—é–¥–∞—é"
                """;
        cashFlowTrader.cashFlow(openTrader);

//        String reopenTrader = """
//            ‚úÖ–§–∏–∫—Å–∏—Ä—É—é –ø–µ—Ä–≤—É—é 1/3 –ø–æ –ª–æ–Ω–≥—É #TRNFP –ø–æ 1300–† —ç—Ç–æ +4.33%
//            P.S. –°—Ç–æ–ø –±—ã–ª –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–µ–∑—É–±—ã—Ç–æ–∫ 1246–†
//            """;
//        cashFlowTrader.cashFlow(reopenTrader);
    }

}